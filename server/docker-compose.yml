version: '3.8'

services:
  server:
    build:
      context: .
      dockerfile: dev.Dockerfile
    image: nodejs-server
    container_name: ${PROJECT_NAME}-server
    restart: unless-stopped
    env_file: .env
    ports:
      - '${SERVER_PORT}:3001'
    depends_on:
      - db
    volumes:
      - .:/home/node/app # Sincroniza o diretório do código do host com o contêiner
      - /home/node/app/node_modules # Evita sobrescrever node_modules
    command: ['npm', 'run', 'dev'] # Executa o comando de desenvolvimento, substitua conforme sua configuração
    environment:
      NODE_ENV: development # Configuração para garantir que o ambiente de desenvolvimento seja detectado
    networks:
      - bookworms-network

  db:
    image: postgres:16
    container_name: ${PROJECT_NAME}-db
    restart: unless-stopped
    env_file: .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    ports:
      - '${DATABASE_PORT}:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - bookworms-network

  test-db:
    image: postgres
    container_name: ${PROJECT_NAME}-test-db
    env_file: .env
    environment:
      - POSTGRES_USER=${DATABASE_TEST_USER}
      - POSTGRES_PASSWORD=${DATABASE_TEST_PASSWORD}
      - POSTGRES_DB=${DATABASE_TEST_DB}
    ports:
      - '${DATABASE_TEST_PORT}:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DATABASE_TEST_USER}']
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - bookworms-network

volumes:
  pgdata:
  node_modules:

networks:
  bookworms-network:
    driver: bridge
